// https://emojipedia.org/nature
const petSorter = (a, b) => {
    if (a.tier != b.tier) return b.tier - a.tier;
    return a.name.localeCompare(b.name);
};
const pets = 
`üêå Snail 1
ü¶ã Butterfly 1
üêú Ant 1
üêù Bee 1
ü™≤ Beetle 1
üêû Ladybug 1
ü¶ó Cricket 1
ü™≥ Cockroach 1
üï∑Ô∏è Spider 1
ü¶Ç Scorpion 2
ü¶ü Mosquito 1
ü™∞ Fly 1
ü™± Worm 1
ü¶† Microbe 3
üê∏ Frog 1
üêä Crocodile 2
üê¢ Turtle 2
ü¶é Lizard 1
üêç Snake 2
üêâ Dragon 3
ü¶ï Sauropod 2
ü¶ñ T-Rex 3
üêã Whale 2
üê¨ Dolphin 3
ü¶≠ Seal 1
üêü Fish 1
üê† Tropical Fish 1
üê° Blowfish 2
ü¶à Shark 3
üêô Octopus 2
ü™∏ Coral 1
ü™º Jellyfish 1
ü¶Ä Crab 1
ü¶û Lobster 2
ü¶ê Shrimp 1
ü¶ë Squid 2
ü¶™ Oyster 1
ü¶É Turkey 1
üêî Chicken 1
üêì Rooster 1
üê§ Chick 1
üê¶ Bird 1
üêß Penguin 2
üïäÔ∏è Dove 1
ü¶Ö Eagle 2
ü¶Ü Duck 1
ü¶¢ Swan 2
ü¶â Owl 2
ü¶§ Dodo 3
ü¶© Flamingo 1
ü¶ö Peacock 3
ü¶ú Parrot 1
üê¶‚Äç‚¨õ Blackbird 1
ü™ø Goose 1
üêí Monkey 2
ü¶ç Gorilla 2
ü¶ß Orangutan 2
üêï Dog 1
üê© Poodle 1
üê∫ Wolf 3
ü¶ä Fox 2
ü¶ù Raccoon 1
üêà Cat 1
üêà‚Äç‚¨õ Black Cat 2
ü¶Å Lion 3
üêÖ Tiger 2
üêÜ Leopard 2
ü´é Moose 3
ü´è Donkey 1
üêé Horse 2
ü¶Ñ Unicorn 3
ü¶ì Zebra 2
ü¶å Deer 1
ü¶¨ Bison 2
üêÇ Ox 2
üêÉ Water Buffalo 1
üêÑ Cow 1
üêñ Pig 1
üêó Boar 2
üêè Ram 1
üêë Ewe 1
üêê Goat 1
üê™ One-Hump Camel 2
üê´ Two-Hump Camel 2
ü¶ô Llama 3
ü¶í Giraffe 1
üêò Elephant 2
ü¶£ Mammoth 3
ü¶è Rhino 2
ü¶õ Hippo 2
üêÅ Mouse 1
üêÄ Rat 1
üêπ Hamster 1
üêá Rabbit 1
üêøÔ∏è Chipmunk 1
ü¶´ Beaver 1
ü¶î Hedgehog 1
ü¶á Bat 1
üêª Bear 1
üêª‚Äç‚ùÑÔ∏è Polar Bear 2
üê® Koala 2
üêº Panda 3
ü¶• Sloth 1
ü¶¶ Otter 1
ü¶® Skunk 1
ü¶ò Kangaroo 2
ü¶° Badger 1
‚õÑ Snowman 2
üòà Devil 3
üëΩ Alien 3
üëπ Red Ogre 1
üßå Troll 1
üí© Poop 2
üëª Ghost 2
üëæ Space Invader 3
ü§ñ Robot 2`.split("\n").map(str => {
    str = str.split(" ");
    return {icon: str[0], name: str.slice(1, str.length - 1).join(" "), tier: str[str.length - 1] - 1};
})
pets.sort(petSorter);
pets.forEach((o, i) => o.id = i);

const PET_TIERS = {
    COMMON: 0,
    RARE: 1,
    EPIC: 2
};
const petTiers = [[], [], []];
pets.forEach(a => {
    petTiers[a.tier].push(a);
});

class PetCollectionTrait extends Trait {
    name = "pets"
    DISPLAY_COUNT = 3
    SHOP_COUNT = 4

    /*
    0 = not owned
    1 = owned, not equipped
    2 = first slot
    3 = second slot
    4 = third slot

    */

    static makePetBox(pet, ex = []) {
        return docMake("div", ["pet-box", ...ex], null, box => {
            if (pet) {
                if (pet.tier == PET_TIERS.COMMON) {
                    box.classList.add("pet-common");
                } else if (pet.tier == PET_TIERS.RARE) {
                    box.classList.add("pet-rare");
                } else if (pet.tier == PET_TIERS.EPIC) {
                    box.classList.add("pet-epic");
                }
            } else {
                box.classList.add("pet-none");
            }

            docMake("div", ["pet-icon"], box, icon => {
                icon.innerText = pet ? pet.icon : "X";
            });

            docMake("div", ["pet-question"], box, icon => {
                icon.innerText = "‚ùî";
            });
        });

        /*

        Content: none, ? / pet,      pet
        Border:  gray, color-shaded, color-bright
        Shadow:  none, none,         color-bright

        */
    }

    reloadCollection(state) {
        const stg = this.stg(state.data);

        for (let i = 0; i < this.DISPLAY_COUNT; i++) {
            docId(`pet-display-${i}`).innerHTML = "";
            docId(`pet-display-${i}`).appendChild(PetCollectionTrait.makePetBox());
        }

        const container = docId("pet-collection");
        for (let i = 0; i < pets.length; i++) {
            const pet = pets[i];
            const box = PetCollectionTrait.makePetBox(pet);
            box.id = `pet-box-${i}`;
            box.addEventListener("click", e => {
                this.selectPet(state, pet.id);
                state.interactions.save();
            });
            container.appendChild(box);
        }

        for (let i = 0; i < pets.length; i++) {
            this.setPetStatus(state, i, stg.pets[i]);
        }
    }

    reloadShop(state) {
        const stg = this.stg(state.data);

        const shopPets = [];
        for (let i = 0; i < this.SHOP_COUNT; i++) {
            let r = state.interactions.rand.at(9213 + i * 191, pets.length);
            while (shopPets.includes(r)) {
                r = (r + 1) % pets.length; 
            }
            shopPets.push(r);

            
            const box = PetCollectionTrait.makePetBox(pets[r], ["pet-show-icon"]);
            
            docId(`pet-shop-${i}`).innerHTML = "";
            docId(`pet-shop-${i}`).appendChild(box);
            
            if (stg.pets[r] != 0) {
                box.classList.add("pet-show-shaded");
                docId(`pet-price-${i}`).innerText = "OWNED";
                docId(`pet-price-${i}`).classList.add("owned");
            } else if (pets[r].tier == PET_TIERS.COMMON) {
                docId(`pet-price-${i}`).innerText = "‚öôÔ∏è20";
                box.addEventListener("click", e => {
                    const ints = this.stg(state.interactions, "currency");
                    if (ints.hasQuantities(0, 0, 20)) {
                        ints.updateQuantities(0, 0, -20);
                        this.buyPet(state, r);
                        state.interactions.save();
                    }
                });
            } else if (pets[r].tier == PET_TIERS.RARE) {
                docId(`pet-price-${i}`).innerText = "ü™ô20";
                box.addEventListener("click", e => {
                    const ints = this.stg(state.interactions, "currency");
                    if (ints.hasQuantities(0, 20, 0)) {
                        ints.updateQuantities(0, -20, 0);
                        this.buyPet(state, r);
                        state.interactions.save();
                    }
                });
            } else if (pets[r].tier == PET_TIERS.EPIC) {
                docId(`pet-price-${i}`).innerText = "üíé20";
                box.addEventListener("click", e => {
                    const ints = this.stg(state.interactions, "currency");
                    if (ints.hasQuantities(20, 0, 0)) {
                        ints.updateQuantities(-20, 0, 0);
                        this.buyPet(state, r);
                        state.interactions.save();
                    }
                });
            }
        }
    }

    buyPet(state, id) {
        const stg = this.stg(state.data);

        if (stg.pets[id] != 0) return;

        if (pets[id].name == "Alien") {
            this.stg(state.interactions, "achievements").give("alien");
        }
        this.setPetStatus(state, id, 1);
        this.reloadShop(state);
    }

    selectPet(state, id) {
        const stg = this.stg(state.data);

        if (stg.pets[id] != 1) return;

        for (let i = 0; i < this.DISPLAY_COUNT; i++) {
            if (stg.pets.some(p => p == i + 2)) continue;

            this.setPetStatus(state, id, i + 2);

            return;
        }
        
    }

    setPetStatus(state, id, status) {
        const stg = this.stg(state.data);
        const box = docId(`pet-box-${id}`);
        const oldStatus = stg.pets[id];

        if (oldStatus > 1) {
            docId(`pet-display-${oldStatus - 2}`).innerHTML = "";
            docId(`pet-display-${oldStatus - 2}`).appendChild(PetCollectionTrait.makePetBox());
        }
        stg.pets[id] = status;

        if (status == 0) {
            box.classList.remove("pet-show-icon");
            box.classList.add("pet-show-question", "pet-show-shaded");
        } else if (status == 1) {
            box.classList.remove("pet-show-question", "pet-show-shaded");
            box.classList.add("pet-show-icon");
        } else {
            box.classList.remove("pet-show-question");
            box.classList.add("pet-show-icon", "pet-show-shaded");

            for (let i = 0; i < stg.pets.length; i++) {
                if (i != id && stg.pets[i] == status) {
                    this.setPetStatus(state, i, 1);
                }
            }

            docId(`pet-display-${status - 2}`).innerHTML = "";
            const newbox = PetCollectionTrait.makePetBox(pets[id], ["pet-show-icon"]);
            newbox.addEventListener("click", e => {
                this.setPetStatus(state, id, 1);
                state.interactions.save();
            });
            docId(`pet-display-${status - 2}`).appendChild(newbox);
        }
    }

    onStart(state) {
        const stg = super.onStart(state);
        
        stg.pets = withDef(this.stg(state.stats).pets, (a => {
            if (localStorage.getItem("powerdle-creator")) {
                a[0] = 1;
            }
            a[88] = 1;
            return a;
        })(pets.map(a => 0))).slice();

        this.onReload(state);
    }

    onReload(state) {
        const stg = super.onReload(state);
        const ints = this.stg(state.interactions);
        ints.hasPet = id => stg.pets[id] > 0;
        ints.buyPet = id => this.buyPet(state, id); 

        const shopElem = docId("pet-shop");
        shopElem.style["grid-template-columns"] = `repeat(${this.SHOP_COUNT}, 1fr)`;
        for (let i = 0; i < this.SHOP_COUNT; i++) {
            docMake("div", [], shopElem, e => {
                e.id = `pet-shop-${i}`;
            });
            docMake("div", ["pet-price"], shopElem, e => {
                e.id = `pet-price-${i}`;
            });
        }

        this.reloadShop(state);

        const displayElem = docId("pet-display");
        displayElem.style["grid-template-columns"] = `repeat(${this.DISPLAY_COUNT}, 1fr)`;
        for (let i = 0; i < this.DISPLAY_COUNT; i++) {
            docMake("div", [], displayElem, e => e.id = `pet-display-${i}`);
        }

        this.reloadCollection(state);
    }

    onSave(state) {
        this.stg(state.stats).pets = this.stg(state.data).pets.slice();
    }

    onPreShare(state) {
        const stg = this.stg(state.data);

        if (!stg.pets.includes(2)) return;
        /*

        ‚ù§Ô∏è Red Heart
        üß° Orange Heart
        üíõ Yellow Heart
        üíö Green Heart
        üíô Blue Heart
        üíú Purple Heart
        ü§é Brown Heart
        üñ§ Black Heart
        ü§ç White Heart
        */
        let str = "Pets: ";
        let strs = [];
        for (let i = 0; i < pets.length; i++) {
            if (stg.pets[i] < 2) continue;

            const pet = pets[i];
            
            if (pet.tier == PET_TIERS.COMMON) {
                strs[stg.pets[i]] = `ü§é${pet.icon}ü§é`;
            } else if (pet.tier == PET_TIERS.RARE) {
                strs[stg.pets[i]] = `üíô${pet.icon}üíô`;
            } else if (pet.tier == PET_TIERS.EPIC) {
                strs[stg.pets[i]] = `üíú${pet.icon}üíú`;
            }
        }
        strs.forEach(s => s ? (str += s) : null);
        str += "\n";

        return str;
    }
}